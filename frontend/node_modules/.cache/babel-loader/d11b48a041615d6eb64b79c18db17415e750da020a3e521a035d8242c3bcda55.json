{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Documents\\\\evitec_test\\\\frontend\\\\src\\\\LiquidEther.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport './LiquidEther.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LiquidEther({\n  mouseForce = 20,\n  cursorSize = 100,\n  isViscous = false,\n  viscous = 30,\n  iterationsViscous = 32,\n  iterationsPoisson = 32,\n  dt = 0.014,\n  BFECC = true,\n  resolution = 0.5,\n  isBounce = false,\n  colors = ['#5227FF', '#FF9FFC', '#B19EEF'],\n  style = {},\n  className = '',\n  autoDemo = true,\n  autoSpeed = 0.5,\n  autoIntensity = 2.2,\n  takeoverDuration = 0.25,\n  autoResumeDelay = 1000,\n  autoRampDuration = 0.6\n}) {\n  _s();\n  const mountRef = useRef(null);\n  const webglRef = useRef(null);\n  const resizeObserverRef = useRef(null);\n  const rafRef = useRef(null);\n  const intersectionObserverRef = useRef(null);\n  const isVisibleRef = useRef(true);\n  const resizeRafRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n    function makePaletteTexture(stops) {\n      let arr;\n      if (Array.isArray(stops) && stops.length > 0) {\n        if (stops.length === 1) {\n          arr = [stops[0], stops[0]];\n        } else {\n          arr = stops;\n        }\n      } else {\n        arr = ['#ffffff', '#ffffff'];\n      }\n      const w = arr.length;\n      const data = new Uint8Array(w * 4);\n      for (let i = 0; i < w; i++) {\n        const c = new THREE.Color(arr[i]);\n        data[i * 4 + 0] = Math.round(c.r * 255);\n        data[i * 4 + 1] = Math.round(c.g * 255);\n        data[i * 4 + 2] = Math.round(c.b * 255);\n        data[i * 4 + 3] = 255;\n      }\n      const tex = new THREE.DataTexture(data, w, 1, THREE.RGBAFormat);\n      tex.magFilter = THREE.LinearFilter;\n      tex.minFilter = THREE.LinearFilter;\n      tex.wrapS = THREE.ClampToEdgeWrapping;\n      tex.wrapT = THREE.ClampToEdgeWrapping;\n      tex.generateMipmaps = false;\n      tex.needsUpdate = true;\n      return tex;\n    }\n    const paletteTex = makePaletteTexture(colors);\n    const bgVec4 = new THREE.Vector4(0, 0, 0, 0); // always transparent\n\n    class CommonClass {\n      constructor() {\n        this.width = 0;\n        this.height = 0;\n        this.aspect = 1;\n        this.pixelRatio = 1;\n        this.isMobile = false;\n        this.breakpoint = 768;\n        this.fboWidth = null;\n        this.fboHeight = null;\n        this.time = 0;\n        this.delta = 0;\n        this.container = null;\n        this.renderer = null;\n        this.clock = null;\n      }\n      init(container) {\n        this.container = container;\n        this.pixelRatio = Math.min(window.devicePixelRatio || 1, 2);\n        this.resize();\n        this.renderer = new THREE.WebGLRenderer({\n          antialias: true,\n          alpha: true\n        });\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(new THREE.Color(0x000000), 0);\n        this.renderer.setPixelRatio(this.pixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.domElement.style.width = '100%';\n        this.renderer.domElement.style.height = '100%';\n        this.renderer.domElement.style.display = 'block';\n        this.clock = new THREE.Clock();\n        this.clock.start();\n      }\n      resize() {\n        if (!this.container) return;\n        const rect = this.container.getBoundingClientRect();\n        this.width = Math.max(1, Math.floor(rect.width));\n        this.height = Math.max(1, Math.floor(rect.height));\n        this.aspect = this.width / this.height;\n        if (this.renderer) this.renderer.setSize(this.width, this.height, false);\n      }\n      update() {\n        this.delta = this.clock.getDelta();\n        this.time += this.delta;\n      }\n    }\n    const Common = new CommonClass();\n    class MouseClass {\n      constructor() {\n        this.mouseMoved = false;\n        this.coords = new THREE.Vector2();\n        this.coords_old = new THREE.Vector2();\n        this.diff = new THREE.Vector2();\n        this.timer = null;\n        this.container = null;\n        this._onMouseMove = this.onDocumentMouseMove.bind(this);\n        this._onTouchStart = this.onDocumentTouchStart.bind(this);\n        this._onTouchMove = this.onDocumentTouchMove.bind(this);\n        this._onMouseEnter = this.onMouseEnter.bind(this);\n        this._onMouseLeave = this.onMouseLeave.bind(this);\n        this._onTouchEnd = this.onTouchEnd.bind(this);\n        this.isHoverInside = false;\n        this.hasUserControl = false;\n        this.isAutoActive = false;\n        this.autoIntensity = 2.0;\n        this.takeoverActive = false;\n        this.takeoverStartTime = 0;\n        this.takeoverDuration = 0.25;\n        this.takeoverFrom = new THREE.Vector2();\n        this.takeoverTo = new THREE.Vector2();\n        this.onInteract = null;\n      }\n      init(container) {\n        this.container = container;\n        container.addEventListener('mousemove', this._onMouseMove, false);\n        container.addEventListener('touchstart', this._onTouchStart, false);\n        container.addEventListener('touchmove', this._onTouchMove, false);\n        container.addEventListener('mouseenter', this._onMouseEnter, false);\n        container.addEventListener('mouseleave', this._onMouseLeave, false);\n        container.addEventListener('touchend', this._onTouchEnd, false);\n      }\n      dispose() {\n        if (!this.container) return;\n        this.container.removeEventListener('mousemove', this._onMouseMove, false);\n        this.container.removeEventListener('touchstart', this._onTouchStart, false);\n        this.container.removeEventListener('touchmove', this._onTouchMove, false);\n        this.container.removeEventListener('mouseenter', this._onMouseEnter, false);\n        this.container.removeEventListener('mouseleave', this._onMouseLeave, false);\n        this.container.removeEventListener('touchend', this._onTouchEnd, false);\n      }\n      setCoords(x, y) {\n        if (!this.container) return;\n        if (this.timer) clearTimeout(this.timer);\n        const rect = this.container.getBoundingClientRect();\n        const nx = (x - rect.left) / rect.width;\n        const ny = (y - rect.top) / rect.height;\n        this.coords.set(nx * 2 - 1, -(ny * 2 - 1));\n        this.mouseMoved = true;\n        this.timer = setTimeout(() => {\n          this.mouseMoved = false;\n        }, 100);\n      }\n      setNormalized(nx, ny) {\n        this.coords.set(nx, ny);\n        this.mouseMoved = true;\n      }\n      onDocumentMouseMove(event) {\n        if (this.onInteract) this.onInteract();\n        if (this.isAutoActive && !this.hasUserControl && !this.takeoverActive) {\n          const rect = this.container.getBoundingClientRect();\n          const nx = (event.clientX - rect.left) / rect.width;\n          const ny = (event.clientY - rect.top) / rect.height;\n          this.takeoverFrom.copy(this.coords);\n          this.takeoverTo.set(nx * 2 - 1, -(ny * 2 - 1));\n          this.takeoverStartTime = performance.now();\n          this.takeoverActive = true;\n          this.hasUserControl = true;\n          this.isAutoActive = false;\n          return;\n        }\n        this.setCoords(event.clientX, event.clientY);\n        this.hasUserControl = true;\n      }\n      onDocumentTouchStart(event) {\n        if (event.touches.length === 1) {\n          const t = event.touches[0];\n          if (this.onInteract) this.onInteract();\n          this.setCoords(t.pageX, t.pageY);\n          this.hasUserControl = true;\n        }\n      }\n      onDocumentTouchMove(event) {\n        if (event.touches.length === 1) {\n          const t = event.touches[0];\n          if (this.onInteract) this.onInteract();\n          this.setCoords(t.pageX, t.pageY);\n        }\n      }\n      onTouchEnd() {\n        this.isHoverInside = false;\n      }\n      onMouseEnter() {\n        this.isHoverInside = true;\n      }\n      onMouseLeave() {\n        this.isHoverInside = false;\n      }\n      update() {\n        if (this.takeoverActive) {\n          const t = (performance.now() - this.takeoverStartTime) / (this.takeoverDuration * 1000);\n          if (t >= 1) {\n            this.takeoverActive = false;\n            this.coords.copy(this.takeoverTo);\n            this.coords_old.copy(this.coords);\n            this.diff.set(0, 0);\n          } else {\n            const k = t * t * (3 - 2 * t);\n            this.coords.copy(this.takeoverFrom).lerp(this.takeoverTo, k);\n          }\n        }\n        this.diff.subVectors(this.coords, this.coords_old);\n        this.coords_old.copy(this.coords);\n        if (this.coords_old.x === 0 && this.coords_old.y === 0) this.diff.set(0, 0);\n        if (this.isAutoActive && !this.takeoverActive) this.diff.multiplyScalar(this.autoIntensity);\n      }\n    }\n    const Mouse = new MouseClass();\n    class AutoDriver {\n      constructor(mouse, manager, opts) {\n        this.mouse = mouse;\n        this.manager = manager;\n        this.enabled = opts.enabled;\n        this.speed = opts.speed; // normalized units/sec\n        this.resumeDelay = opts.resumeDelay || 3000; // ms\n        this.rampDurationMs = (opts.rampDuration || 0) * 1000;\n        this.active = false;\n        this.current = new THREE.Vector2(0, 0);\n        this.target = new THREE.Vector2();\n        this.lastTime = performance.now();\n        this.activationTime = 0;\n        this.margin = 0.2;\n        this._tmpDir = new THREE.Vector2(); // reuse temp vector to avoid per-frame alloc\n        this.pickNewTarget();\n      }\n      pickNewTarget() {\n        const r = Math.random;\n        this.target.set((r() * 2 - 1) * (1 - this.margin), (r() * 2 - 1) * (1 - this.margin));\n      }\n      forceStop() {\n        this.active = false;\n        this.mouse.isAutoActive = false;\n      }\n      update() {\n        if (!this.enabled) return;\n        const now = performance.now();\n        const idle = now - this.manager.lastUserInteraction;\n        if (idle < this.resumeDelay) {\n          if (this.active) this.forceStop();\n          return;\n        }\n        if (this.mouse.isHoverInside) {\n          if (this.active) this.forceStop();\n          return;\n        }\n        if (!this.active) {\n          this.active = true;\n          this.current.copy(this.mouse.coords);\n          this.lastTime = now;\n          this.activationTime = now;\n        }\n        if (!this.active) return;\n        this.mouse.isAutoActive = true;\n        let dtSec = (now - this.lastTime) / 1000;\n        this.lastTime = now;\n        if (dtSec > 0.2) dtSec = 0.016;\n        const dir = this._tmpDir.subVectors(this.target, this.current);\n        const dist = dir.length();\n        if (dist < 0.01) {\n          this.pickNewTarget();\n          return;\n        }\n        dir.normalize();\n        let ramp = 1;\n        if (this.rampDurationMs > 0) {\n          const t = Math.min(1, (now - this.activationTime) / this.rampDurationMs);\n          ramp = t * t * (3 - 2 * t);\n        }\n        const step = this.speed * dtSec * ramp;\n        const move = Math.min(step, dist);\n        this.current.addScaledVector(dir, move);\n        this.mouse.setNormalized(this.current.x, this.current.y);\n      }\n    }\n    const face_vert = `\n  attribute vec3 position;\n  uniform vec2 px;\n  uniform vec2 boundarySpace;\n  varying vec2 uv;\n  precision highp float;\n  void main(){\n  vec3 pos = position;\n  vec2 scale = 1.0 - boundarySpace * 2.0;\n  pos.xy = pos.xy * scale;\n  uv = vec2(0.5)+(pos.xy)*0.5;\n  gl_Position = vec4(pos, 1.0);\n}\n`;\n    const line_vert = `\n  attribute vec3 position;\n  uniform vec2 px;\n  precision highp float;\n  varying vec2 uv;\n  void main(){\n  vec3 pos = position;\n  uv = 0.5 + pos.xy * 0.5;\n  vec2 n = sign(pos.xy);\n  pos.xy = abs(pos.xy) - px * 1.0;\n  pos.xy *= n;\n  gl_Position = vec4(pos, 1.0);\n}\n`;\n    const mouse_vert = `\n    precision highp float;\n    attribute vec3 position;\n    attribute vec2 uv;\n    uniform vec2 center;\n    uniform vec2 scale;\n    uniform vec2 px;\n    varying vec2 vUv;\n    void main(){\n    vec2 pos = position.xy * scale * 2.0 * px + center;\n    vUv = uv;\n    gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n    const advection_frag = `\n    precision highp float;\n    uniform sampler2D velocity;\n    uniform float dt;\n    uniform bool isBFECC;\n    uniform vec2 fboSize;\n    uniform vec2 px;\n    varying vec2 uv;\n    void main(){\n    vec2 ratio = max(fboSize.x, fboSize.y) / fboSize;\n    if(isBFECC == false){\n        vec2 vel = texture2D(velocity, uv).xy;\n        vec2 uv2 = uv - vel * dt * ratio;\n        vec2 newVel = texture2D(velocity, uv2).xy;\n        gl_FragColor = vec4(newVel, 0.0, 0.0);\n    } else {\n        vec2 spot_new = uv;\n        vec2 vel_old = texture2D(velocity, uv).xy;\n        vec2 spot_old = spot_new - vel_old * dt * ratio;\n        vec2 vel_new1 = texture2D(velocity, spot_old).xy;\n        vec2 spot_new2 = spot_old + vel_new1 * dt * ratio;\n        vec2 error = spot_new2 - spot_new;\n        vec2 spot_new3 = spot_new - error / 2.0;\n        vec2 vel_2 = texture2D(velocity, spot_new3).xy;\n        vec2 spot_old2 = spot_new3 - vel_2 * dt * ratio;\n        vec2 newVel2 = texture2D(velocity, spot_old2).xy; \n        gl_FragColor = vec4(newVel2, 0.0, 0.0);\n    }\n}\n`;\n    const color_frag = `\n    precision highp float;\n    uniform sampler2D velocity;\n    uniform sampler2D palette;\n    uniform vec4 bgColor;\n    varying vec2 uv;\n    void main(){\n    vec2 vel = texture2D(velocity, uv).xy;\n    float lenv = clamp(length(vel), 0.0, 1.0);\n    vec3 c = texture2D(palette, vec2(lenv, 0.5)).rgb;\n    vec3 outRGB = mix(bgColor.rgb, c, lenv);\n    float outA = mix(bgColor.a, 1.0, lenv);\n    gl_FragColor = vec4(outRGB, outA);\n}\n`;\n    const divergence_frag = `\n    precision highp float;\n    uniform sampler2D velocity;\n    uniform float dt;\n    uniform vec2 px;\n    varying vec2 uv;\n    void main(){\n    float x0 = texture2D(velocity, uv-vec2(px.x, 0.0)).x;\n    float x1 = texture2D(velocity, uv+vec2(px.x, 0.0)).x;\n    float y0 = texture2D(velocity, uv-vec2(0.0, px.y)).y;\n    float y1 = texture2D(velocity, uv+vec2(0.0, px.y)).y;\n    float divergence = (x1 - x0 + y1 - y0) / 2.0;\n    gl_FragColor = vec4(divergence / dt);\n}\n`;\n    const externalForce_frag = `\n    precision highp float;\n    uniform vec2 force;\n    uniform vec2 center;\n    uniform vec2 scale;\n    uniform vec2 px;\n    varying vec2 vUv;\n    void main(){\n    vec2 circle = (vUv - 0.5) * 2.0;\n    float d = 1.0 - min(length(circle), 1.0);\n    d *= d;\n    gl_FragColor = vec4(force * d, 0.0, 1.0);\n}\n`;\n    const poisson_frag = `\n    precision highp float;\n    uniform sampler2D pressure;\n    uniform sampler2D divergence;\n    uniform vec2 px;\n    varying vec2 uv;\n    void main(){\n    float p0 = texture2D(pressure, uv + vec2(px.x * 2.0, 0.0)).r;\n    float p1 = texture2D(pressure, uv - vec2(px.x * 2.0, 0.0)).r;\n    float p2 = texture2D(pressure, uv + vec2(0.0, px.y * 2.0)).r;\n    float p3 = texture2D(pressure, uv - vec2(0.0, px.y * 2.0)).r;\n    float div = texture2D(divergence, uv).r;\n    float newP = (p0 + p1 + p2 + p3) / 4.0 - div;\n    gl_FragColor = vec4(newP);\n}\n`;\n    const pressure_frag = `\n    precision highp float;\n    uniform sampler2D pressure;\n    uniform sampler2D velocity;\n    uniform vec2 px;\n    uniform float dt;\n    varying vec2 uv;\n    void main(){\n    float step = 1.0;\n    float p0 = texture2D(pressure, uv + vec2(px.x * step, 0.0)).r;\n    float p1 = texture2D(pressure, uv - vec2(px.x * step, 0.0)).r;\n    float p2 = texture2D(pressure, uv + vec2(0.0, px.y * step)).r;\n    float p3 = texture2D(pressure, uv - vec2(0.0, px.y * step)).r;\n    vec2 v = texture2D(velocity, uv).xy;\n    vec2 gradP = vec2(p0 - p1, p2 - p3) * 0.5;\n    v = v - gradP * dt;\n    gl_FragColor = vec4(v, 0.0, 1.0);\n}\n`;\n    const viscous_frag = `\n    precision highp float;\n    uniform sampler2D velocity;\n    uniform sampler2D velocity_new;\n    uniform float v;\n    uniform vec2 px;\n    uniform float dt;\n    varying vec2 uv;\n    void main(){\n    vec2 old = texture2D(velocity, uv).xy;\n    vec2 new0 = texture2D(velocity_new, uv + vec2(px.x * 2.0, 0.0)).xy;\n    vec2 new1 = texture2D(velocity_new, uv - vec2(px.x * 2.0, 0.0)).xy;\n    vec2 new2 = texture2D(velocity_new, uv + vec2(0.0, px.y * 2.0)).xy;\n    vec2 new3 = texture2D(velocity_new, uv - vec2(0.0, px.y * 2.0)).xy;\n    vec2 newv = 4.0 * old + v * dt * (new0 + new1 + new2 + new3);\n    newv /= 4.0 * (1.0 + v * dt);\n    gl_FragColor = vec4(newv, 0.0, 0.0);\n}\n`;\n    class ShaderPass {\n      constructor(props) {\n        var _this$props$material;\n        this.props = props || {};\n        this.uniforms = (_this$props$material = this.props.material) === null || _this$props$material === void 0 ? void 0 : _this$props$material.uniforms;\n        this.scene = null;\n        this.camera = null;\n        this.material = null;\n        this.geometry = null;\n        this.plane = null;\n      }\n      init() {\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.Camera();\n        if (this.uniforms) {\n          this.material = new THREE.RawShaderMaterial(this.props.material);\n          this.geometry = new THREE.PlaneGeometry(2.0, 2.0);\n          this.plane = new THREE.Mesh(this.geometry, this.material);\n          this.scene.add(this.plane);\n        }\n      }\n      update() {\n        Common.renderer.setRenderTarget(this.props.output || null);\n        Common.renderer.render(this.scene, this.camera);\n        Common.renderer.setRenderTarget(null);\n      }\n    }\n    class Advection extends ShaderPass {\n      constructor(simProps) {\n        super({\n          material: {\n            vertexShader: face_vert,\n            fragmentShader: advection_frag,\n            uniforms: {\n              boundarySpace: {\n                value: simProps.cellScale\n              },\n              px: {\n                value: simProps.cellScale\n              },\n              fboSize: {\n                value: simProps.fboSize\n              },\n              velocity: {\n                value: simProps.src.texture\n              },\n              dt: {\n                value: simProps.dt\n              },\n              isBFECC: {\n                value: true\n              }\n            }\n          },\n          output: simProps.dst\n        });\n        this.uniforms = this.props.material.uniforms;\n        this.init();\n      }\n      init() {\n        super.init();\n        this.createBoundary();\n      }\n      createBoundary() {\n        const boundaryG = new THREE.BufferGeometry();\n        const vertices_boundary = new Float32Array([-1, -1, 0, -1, 1, 0, -1, 1, 0, 1, 1, 0, 1, 1, 0, 1, -1, 0, 1, -1, 0, -1, -1, 0]);\n        boundaryG.setAttribute('position', new THREE.BufferAttribute(vertices_boundary, 3));\n        const boundaryM = new THREE.RawShaderMaterial({\n          vertexShader: line_vert,\n          fragmentShader: advection_frag,\n          uniforms: this.uniforms\n        });\n        this.line = new THREE.LineSegments(boundaryG, boundaryM);\n        this.scene.add(this.line);\n      }\n      update({\n        dt,\n        isBounce,\n        BFECC\n      }) {\n        this.uniforms.dt.value = dt;\n        this.line.visible = isBounce;\n        this.uniforms.isBFECC.value = BFECC;\n        super.update();\n      }\n    }\n    class ExternalForce extends ShaderPass {\n      constructor(simProps) {\n        super({\n          output: simProps.dst\n        });\n        this.init(simProps);\n      }\n      init(simProps) {\n        super.init();\n        const mouseG = new THREE.PlaneGeometry(1, 1);\n        const mouseM = new THREE.RawShaderMaterial({\n          vertexShader: mouse_vert,\n          fragmentShader: externalForce_frag,\n          blending: THREE.AdditiveBlending,\n          depthWrite: false,\n          uniforms: {\n            px: {\n              value: simProps.cellScale\n            },\n            force: {\n              value: new THREE.Vector2(0.0, 0.0)\n            },\n            center: {\n              value: new THREE.Vector2(0.0, 0.0)\n            },\n            scale: {\n              value: new THREE.Vector2(simProps.cursor_size, simProps.cursor_size)\n            }\n          }\n        });\n        this.mouse = new THREE.Mesh(mouseG, mouseM);\n        this.scene.add(this.mouse);\n      }\n      update(props) {\n        const forceX = Mouse.diff.x / 2 * props.mouse_force;\n        const forceY = Mouse.diff.y / 2 * props.mouse_force;\n        const cursorSizeX = props.cursor_size * props.cellScale.x;\n        const cursorSizeY = props.cursor_size * props.cellScale.y;\n        const centerX = Math.min(Math.max(Mouse.coords.x, -1 + cursorSizeX + props.cellScale.x * 2), 1 - cursorSizeX - props.cellScale.x * 2);\n        const centerY = Math.min(Math.max(Mouse.coords.y, -1 + cursorSizeY + props.cellScale.y * 2), 1 - cursorSizeY - props.cellScale.y * 2);\n        const uniforms = this.mouse.material.uniforms;\n        uniforms.force.value.set(forceX, forceY);\n        uniforms.center.value.set(centerX, centerY);\n        uniforms.scale.value.set(props.cursor_size, props.cursor_size);\n        super.update();\n      }\n    }\n    class Viscous extends ShaderPass {\n      constructor(simProps) {\n        super({\n          material: {\n            vertexShader: face_vert,\n            fragmentShader: viscous_frag,\n            uniforms: {\n              boundarySpace: {\n                value: simProps.boundarySpace\n              },\n              velocity: {\n                value: simProps.src.texture\n              },\n              velocity_new: {\n                value: simProps.dst_.texture\n              },\n              v: {\n                value: simProps.viscous\n              },\n              px: {\n                value: simProps.cellScale\n              },\n              dt: {\n                value: simProps.dt\n              }\n            }\n          },\n          output: simProps.dst,\n          output0: simProps.dst_,\n          output1: simProps.dst\n        });\n        this.init();\n      }\n      update({\n        viscous,\n        iterations,\n        dt\n      }) {\n        let fbo_in, fbo_out;\n        this.uniforms.v.value = viscous;\n        for (let i = 0; i < iterations; i++) {\n          if (i % 2 === 0) {\n            fbo_in = this.props.output0;\n            fbo_out = this.props.output1;\n          } else {\n            fbo_in = this.props.output1;\n            fbo_out = this.props.output0;\n          }\n          this.uniforms.velocity_new.value = fbo_in.texture;\n          this.props.output = fbo_out;\n          this.uniforms.dt.value = dt;\n          super.update();\n        }\n        return fbo_out;\n      }\n    }\n    class Divergence extends ShaderPass {\n      constructor(simProps) {\n        super({\n          material: {\n            vertexShader: face_vert,\n            fragmentShader: divergence_frag,\n            uniforms: {\n              boundarySpace: {\n                value: simProps.boundarySpace\n              },\n              velocity: {\n                value: simProps.src.texture\n              },\n              px: {\n                value: simProps.cellScale\n              },\n              dt: {\n                value: simProps.dt\n              }\n            }\n          },\n          output: simProps.dst\n        });\n        this.init();\n      }\n      update({\n        vel\n      }) {\n        this.uniforms.velocity.value = vel.texture;\n        super.update();\n      }\n    }\n    class Poisson extends ShaderPass {\n      constructor(simProps) {\n        super({\n          material: {\n            vertexShader: face_vert,\n            fragmentShader: poisson_frag,\n            uniforms: {\n              boundarySpace: {\n                value: simProps.boundarySpace\n              },\n              pressure: {\n                value: simProps.dst_.texture\n              },\n              divergence: {\n                value: simProps.src.texture\n              },\n              px: {\n                value: simProps.cellScale\n              }\n            }\n          },\n          output: simProps.dst,\n          output0: simProps.dst_,\n          output1: simProps.dst\n        });\n        this.init();\n      }\n      update({\n        iterations\n      }) {\n        let p_in, p_out;\n        for (let i = 0; i < iterations; i++) {\n          if (i % 2 === 0) {\n            p_in = this.props.output0;\n            p_out = this.props.output1;\n          } else {\n            p_in = this.props.output1;\n            p_out = this.props.output0;\n          }\n          this.uniforms.pressure.value = p_in.texture;\n          this.props.output = p_out;\n          super.update();\n        }\n        return p_out;\n      }\n    }\n    class Pressure extends ShaderPass {\n      constructor(simProps) {\n        super({\n          material: {\n            vertexShader: face_vert,\n            fragmentShader: pressure_frag,\n            uniforms: {\n              boundarySpace: {\n                value: simProps.boundarySpace\n              },\n              pressure: {\n                value: simProps.src_p.texture\n              },\n              velocity: {\n                value: simProps.src_v.texture\n              },\n              px: {\n                value: simProps.cellScale\n              },\n              dt: {\n                value: simProps.dt\n              }\n            }\n          },\n          output: simProps.dst\n        });\n        this.init();\n      }\n      update({\n        vel,\n        pressure\n      }) {\n        this.uniforms.velocity.value = vel.texture;\n        this.uniforms.pressure.value = pressure.texture;\n        super.update();\n      }\n    }\n    class Simulation {\n      constructor(options) {\n        this.options = {\n          iterations_poisson: 32,\n          iterations_viscous: 32,\n          mouse_force: 20,\n          resolution: 0.5,\n          cursor_size: 100,\n          viscous: 30,\n          isBounce: false,\n          dt: 0.014,\n          isViscous: false,\n          BFECC: true,\n          ...options\n        };\n        this.fbos = {\n          vel_0: null,\n          vel_1: null,\n          vel_viscous0: null,\n          vel_viscous1: null,\n          div: null,\n          pressure_0: null,\n          pressure_1: null\n        };\n        this.fboSize = new THREE.Vector2();\n        this.cellScale = new THREE.Vector2();\n        this.boundarySpace = new THREE.Vector2();\n        this.init();\n      }\n      init() {\n        this.calcSize();\n        this.createAllFBO();\n        this.createShaderPass();\n      }\n      getFloatType() {\n        const isIOS = /(iPad|iPhone|iPod)/i.test(navigator.userAgent);\n        return isIOS ? THREE.HalfFloatType : THREE.FloatType;\n      }\n      createAllFBO() {\n        const type = this.getFloatType();\n        const opts = {\n          type,\n          depthBuffer: false,\n          stencilBuffer: false,\n          minFilter: THREE.LinearFilter,\n          magFilter: THREE.LinearFilter,\n          wrapS: THREE.ClampToEdgeWrapping,\n          wrapT: THREE.ClampToEdgeWrapping\n        };\n        for (let key in this.fbos) {\n          this.fbos[key] = new THREE.WebGLRenderTarget(this.fboSize.x, this.fboSize.y, opts);\n        }\n      }\n      createShaderPass() {\n        this.advection = new Advection({\n          cellScale: this.cellScale,\n          fboSize: this.fboSize,\n          dt: this.options.dt,\n          src: this.fbos.vel_0,\n          dst: this.fbos.vel_1\n        });\n        this.externalForce = new ExternalForce({\n          cellScale: this.cellScale,\n          cursor_size: this.options.cursor_size,\n          dst: this.fbos.vel_1\n        });\n        this.viscous = new Viscous({\n          cellScale: this.cellScale,\n          boundarySpace: this.boundarySpace,\n          viscous: this.options.viscous,\n          src: this.fbos.vel_1,\n          dst: this.fbos.vel_viscous1,\n          dst_: this.fbos.vel_viscous0,\n          dt: this.options.dt\n        });\n        this.divergence = new Divergence({\n          cellScale: this.cellScale,\n          boundarySpace: this.boundarySpace,\n          src: this.fbos.vel_viscous0,\n          dst: this.fbos.div,\n          dt: this.options.dt\n        });\n        this.poisson = new Poisson({\n          cellScale: this.cellScale,\n          boundarySpace: this.boundarySpace,\n          src: this.fbos.div,\n          dst: this.fbos.pressure_1,\n          dst_: this.fbos.pressure_0\n        });\n        this.pressure = new Pressure({\n          cellScale: this.cellScale,\n          boundarySpace: this.boundarySpace,\n          src_p: this.fbos.pressure_0,\n          src_v: this.fbos.vel_viscous0,\n          dst: this.fbos.vel_0,\n          dt: this.options.dt\n        });\n      }\n      calcSize() {\n        const width = Math.max(1, Math.round(this.options.resolution * Common.width));\n        const height = Math.max(1, Math.round(this.options.resolution * Common.height));\n        const px_x = 1.0 / width;\n        const px_y = 1.0 / height;\n        this.cellScale.set(px_x, px_y);\n        this.fboSize.set(width, height);\n      }\n      resize() {\n        this.calcSize();\n        for (let key in this.fbos) {\n          this.fbos[key].setSize(this.fboSize.x, this.fboSize.y);\n        }\n      }\n      update() {\n        if (this.options.isBounce) {\n          this.boundarySpace.set(0, 0);\n        } else {\n          this.boundarySpace.copy(this.cellScale);\n        }\n        this.advection.update({\n          dt: this.options.dt,\n          isBounce: this.options.isBounce,\n          BFECC: this.options.BFECC\n        });\n        this.externalForce.update({\n          cursor_size: this.options.cursor_size,\n          mouse_force: this.options.mouse_force,\n          cellScale: this.cellScale\n        });\n        let vel = this.fbos.vel_1;\n        if (this.options.isViscous) {\n          vel = this.viscous.update({\n            viscous: this.options.viscous,\n            iterations: this.options.iterations_viscous,\n            dt: this.options.dt\n          });\n        }\n        this.divergence.update({\n          vel\n        });\n        const pressure = this.poisson.update({\n          iterations: this.options.iterations_poisson\n        });\n        this.pressure.update({\n          vel,\n          pressure\n        });\n      }\n    }\n    class Output {\n      constructor() {\n        this.init();\n      }\n      init() {\n        this.simulation = new Simulation();\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.Camera();\n        this.output = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), new THREE.RawShaderMaterial({\n          vertexShader: face_vert,\n          fragmentShader: color_frag,\n          transparent: true,\n          depthWrite: false,\n          uniforms: {\n            velocity: {\n              value: this.simulation.fbos.vel_0.texture\n            },\n            boundarySpace: {\n              value: new THREE.Vector2()\n            },\n            palette: {\n              value: paletteTex\n            },\n            bgColor: {\n              value: bgVec4\n            }\n          }\n        }));\n        this.scene.add(this.output);\n      }\n      addScene(mesh) {\n        this.scene.add(mesh);\n      }\n      resize() {\n        this.simulation.resize();\n      }\n      render() {\n        Common.renderer.setRenderTarget(null);\n        Common.renderer.render(this.scene, this.camera);\n      }\n      update() {\n        this.simulation.update();\n        this.render();\n      }\n    }\n    class WebGLManager {\n      constructor(props) {\n        this.props = props;\n        Common.init(props.$wrapper);\n        Mouse.init(props.$wrapper);\n        Mouse.autoIntensity = props.autoIntensity;\n        Mouse.takeoverDuration = props.takeoverDuration;\n        this.lastUserInteraction = performance.now();\n        Mouse.onInteract = () => {\n          this.lastUserInteraction = performance.now();\n          if (this.autoDriver) this.autoDriver.forceStop();\n        };\n        this.autoDriver = new AutoDriver(Mouse, this, {\n          enabled: props.autoDemo,\n          speed: props.autoSpeed,\n          resumeDelay: props.autoResumeDelay,\n          rampDuration: props.autoRampDuration\n        });\n        this.init();\n        this._loop = this.loop.bind(this);\n        this._resize = this.resize.bind(this);\n        window.addEventListener('resize', this._resize);\n        this._onVisibility = () => {\n          const hidden = document.hidden;\n          if (hidden) {\n            this.pause();\n          } else if (isVisibleRef.current) {\n            this.start();\n          }\n        };\n        document.addEventListener('visibilitychange', this._onVisibility);\n        this.running = false;\n      }\n      init() {\n        this.props.$wrapper.prepend(Common.renderer.domElement);\n        this.output = new Output();\n      }\n      resize() {\n        Common.resize();\n        this.output.resize();\n      }\n      render() {\n        if (this.autoDriver) this.autoDriver.update();\n        Mouse.update();\n        Common.update();\n        this.output.update();\n      }\n      loop() {\n        if (!this.running) return; // safety\n        this.render();\n        rafRef.current = requestAnimationFrame(this._loop);\n      }\n      start() {\n        if (this.running) return;\n        this.running = true;\n        this._loop();\n      }\n      pause() {\n        this.running = false;\n        if (rafRef.current) {\n          cancelAnimationFrame(rafRef.current);\n          rafRef.current = null;\n        }\n      }\n      dispose() {\n        try {\n          window.removeEventListener('resize', this._resize);\n          document.removeEventListener('visibilitychange', this._onVisibility);\n          Mouse.dispose();\n          if (Common.renderer) {\n            const canvas = Common.renderer.domElement;\n            if (canvas && canvas.parentNode) canvas.parentNode.removeChild(canvas);\n            Common.renderer.dispose();\n          }\n        } catch (e) {\n          void 0;\n        }\n      }\n    }\n    const container = mountRef.current;\n    container.style.position = container.style.position || 'relative';\n    container.style.overflow = container.style.overflow || 'hidden';\n    const webgl = new WebGLManager({\n      $wrapper: container,\n      autoDemo,\n      autoSpeed,\n      autoIntensity,\n      takeoverDuration,\n      autoResumeDelay,\n      autoRampDuration\n    });\n    webglRef.current = webgl;\n    const applyOptionsFromProps = () => {\n      var _webglRef$current$out;\n      if (!webglRef.current) return;\n      const sim = (_webglRef$current$out = webglRef.current.output) === null || _webglRef$current$out === void 0 ? void 0 : _webglRef$current$out.simulation;\n      if (!sim) return;\n      const prevRes = sim.options.resolution;\n      Object.assign(sim.options, {\n        mouse_force: mouseForce,\n        cursor_size: cursorSize,\n        isViscous,\n        viscous,\n        iterations_viscous: iterationsViscous,\n        iterations_poisson: iterationsPoisson,\n        dt,\n        BFECC,\n        resolution,\n        isBounce\n      });\n      if (resolution !== prevRes) {\n        sim.resize();\n      }\n    };\n    applyOptionsFromProps();\n    webgl.start();\n\n    // IntersectionObserver to pause rendering when not visible\n    const io = new IntersectionObserver(entries => {\n      const entry = entries[0];\n      const isVisible = entry.isIntersecting && entry.intersectionRatio > 0;\n      isVisibleRef.current = isVisible;\n      if (!webglRef.current) return;\n      if (isVisible && !document.hidden) {\n        webglRef.current.start();\n      } else {\n        webglRef.current.pause();\n      }\n    }, {\n      threshold: [0, 0.01, 0.1]\n    });\n    io.observe(container);\n    intersectionObserverRef.current = io;\n    const ro = new ResizeObserver(() => {\n      if (!webglRef.current) return;\n      if (resizeRafRef.current) cancelAnimationFrame(resizeRafRef.current);\n      resizeRafRef.current = requestAnimationFrame(() => {\n        if (!webglRef.current) return;\n        webglRef.current.resize();\n      });\n    });\n    ro.observe(container);\n    resizeObserverRef.current = ro;\n    return () => {\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\n      if (resizeObserverRef.current) {\n        try {\n          resizeObserverRef.current.disconnect();\n        } catch (e) {\n          void 0;\n        }\n      }\n      if (intersectionObserverRef.current) {\n        try {\n          intersectionObserverRef.current.disconnect();\n        } catch (e) {\n          void 0;\n        }\n      }\n      if (webglRef.current) {\n        webglRef.current.dispose();\n      }\n      webglRef.current = null;\n    };\n  }, [BFECC, cursorSize, dt, isBounce, isViscous, iterationsPoisson, iterationsViscous, mouseForce, resolution, viscous, colors, autoDemo, autoSpeed, autoIntensity, takeoverDuration, autoResumeDelay, autoRampDuration]);\n  useEffect(() => {\n    var _webgl$output;\n    const webgl = webglRef.current;\n    if (!webgl) return;\n    const sim = (_webgl$output = webgl.output) === null || _webgl$output === void 0 ? void 0 : _webgl$output.simulation;\n    if (!sim) return;\n    const prevRes = sim.options.resolution;\n    Object.assign(sim.options, {\n      mouse_force: mouseForce,\n      cursor_size: cursorSize,\n      isViscous,\n      viscous,\n      iterations_viscous: iterationsViscous,\n      iterations_poisson: iterationsPoisson,\n      dt,\n      BFECC,\n      resolution,\n      isBounce\n    });\n    if (webgl.autoDriver) {\n      webgl.autoDriver.enabled = autoDemo;\n      webgl.autoDriver.speed = autoSpeed;\n      webgl.autoDriver.resumeDelay = autoResumeDelay;\n      webgl.autoDriver.rampDurationMs = autoRampDuration * 1000;\n      if (webgl.autoDriver.mouse) {\n        webgl.autoDriver.mouse.autoIntensity = autoIntensity;\n        webgl.autoDriver.mouse.takeoverDuration = takeoverDuration;\n      }\n    }\n    if (resolution !== prevRes) {\n      sim.resize();\n    }\n  }, [mouseForce, cursorSize, isViscous, viscous, iterationsViscous, iterationsPoisson, dt, BFECC, resolution, isBounce, autoDemo, autoSpeed, autoIntensity, takeoverDuration, autoResumeDelay, autoRampDuration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    className: `liquid-ether-container ${className || ''}`,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1143,\n    columnNumber: 10\n  }, this);\n}\n_s(LiquidEther, \"hAx50u+6RcZTliGOaGfgnNsliJ8=\");\n_c = LiquidEther;\nvar _c;\n$RefreshReg$(_c, \"LiquidEther\");","map":{"version":3,"names":["useEffect","useRef","THREE","jsxDEV","_jsxDEV","LiquidEther","mouseForce","cursorSize","isViscous","viscous","iterationsViscous","iterationsPoisson","dt","BFECC","resolution","isBounce","colors","style","className","autoDemo","autoSpeed","autoIntensity","takeoverDuration","autoResumeDelay","autoRampDuration","_s","mountRef","webglRef","resizeObserverRef","rafRef","intersectionObserverRef","isVisibleRef","resizeRafRef","current","makePaletteTexture","stops","arr","Array","isArray","length","w","data","Uint8Array","i","c","Color","Math","round","r","g","b","tex","DataTexture","RGBAFormat","magFilter","LinearFilter","minFilter","wrapS","ClampToEdgeWrapping","wrapT","generateMipmaps","needsUpdate","paletteTex","bgVec4","Vector4","CommonClass","constructor","width","height","aspect","pixelRatio","isMobile","breakpoint","fboWidth","fboHeight","time","delta","container","renderer","clock","init","min","window","devicePixelRatio","resize","WebGLRenderer","antialias","alpha","autoClear","setClearColor","setPixelRatio","setSize","domElement","display","Clock","start","rect","getBoundingClientRect","max","floor","update","getDelta","Common","MouseClass","mouseMoved","coords","Vector2","coords_old","diff","timer","_onMouseMove","onDocumentMouseMove","bind","_onTouchStart","onDocumentTouchStart","_onTouchMove","onDocumentTouchMove","_onMouseEnter","onMouseEnter","_onMouseLeave","onMouseLeave","_onTouchEnd","onTouchEnd","isHoverInside","hasUserControl","isAutoActive","takeoverActive","takeoverStartTime","takeoverFrom","takeoverTo","onInteract","addEventListener","dispose","removeEventListener","setCoords","x","y","clearTimeout","nx","left","ny","top","set","setTimeout","setNormalized","event","clientX","clientY","copy","performance","now","touches","t","pageX","pageY","k","lerp","subVectors","multiplyScalar","Mouse","AutoDriver","mouse","manager","opts","enabled","speed","resumeDelay","rampDurationMs","rampDuration","active","target","lastTime","activationTime","margin","_tmpDir","pickNewTarget","random","forceStop","idle","lastUserInteraction","dtSec","dir","dist","normalize","ramp","step","move","addScaledVector","face_vert","line_vert","mouse_vert","advection_frag","color_frag","divergence_frag","externalForce_frag","poisson_frag","pressure_frag","viscous_frag","ShaderPass","props","_this$props$material","uniforms","material","scene","camera","geometry","plane","Scene","Camera","RawShaderMaterial","PlaneGeometry","Mesh","add","setRenderTarget","output","render","Advection","simProps","vertexShader","fragmentShader","boundarySpace","value","cellScale","px","fboSize","velocity","src","texture","isBFECC","dst","createBoundary","boundaryG","BufferGeometry","vertices_boundary","Float32Array","setAttribute","BufferAttribute","boundaryM","line","LineSegments","visible","ExternalForce","mouseG","mouseM","blending","AdditiveBlending","depthWrite","force","center","scale","cursor_size","forceX","mouse_force","forceY","cursorSizeX","cursorSizeY","centerX","centerY","Viscous","velocity_new","dst_","v","output0","output1","iterations","fbo_in","fbo_out","Divergence","vel","Poisson","pressure","divergence","p_in","p_out","Pressure","src_p","src_v","Simulation","options","iterations_poisson","iterations_viscous","fbos","vel_0","vel_1","vel_viscous0","vel_viscous1","div","pressure_0","pressure_1","calcSize","createAllFBO","createShaderPass","getFloatType","isIOS","test","navigator","userAgent","HalfFloatType","FloatType","type","depthBuffer","stencilBuffer","key","WebGLRenderTarget","advection","externalForce","poisson","px_x","px_y","Output","simulation","transparent","palette","bgColor","addScene","mesh","WebGLManager","$wrapper","autoDriver","_loop","loop","_resize","_onVisibility","hidden","document","pause","running","prepend","requestAnimationFrame","cancelAnimationFrame","canvas","parentNode","removeChild","e","position","overflow","webgl","applyOptionsFromProps","_webglRef$current$out","sim","prevRes","Object","assign","io","IntersectionObserver","entries","entry","isVisible","isIntersecting","intersectionRatio","threshold","observe","ro","ResizeObserver","disconnect","_webgl$output","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/david/Documents/evitec_test/frontend/src/LiquidEther.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport './LiquidEther.css';\r\n\r\nexport default function LiquidEther({\r\n  mouseForce = 20,\r\n  cursorSize = 100,\r\n  isViscous = false,\r\n  viscous = 30,\r\n  iterationsViscous = 32,\r\n  iterationsPoisson = 32,\r\n  dt = 0.014,\r\n  BFECC = true,\r\n  resolution = 0.5,\r\n  isBounce = false,\r\n  colors = ['#5227FF', '#FF9FFC', '#B19EEF'],\r\n  style = {},\r\n  className = '',\r\n  autoDemo = true,\r\n  autoSpeed = 0.5,\r\n  autoIntensity = 2.2,\r\n  takeoverDuration = 0.25,\r\n  autoResumeDelay = 1000,\r\n  autoRampDuration = 0.6\r\n}) {\r\n  const mountRef = useRef(null);\r\n  const webglRef = useRef(null);\r\n  const resizeObserverRef = useRef(null);\r\n  const rafRef = useRef(null);\r\n  const intersectionObserverRef = useRef(null);\r\n  const isVisibleRef = useRef(true);\r\n  const resizeRafRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    function makePaletteTexture(stops) {\r\n      let arr;\r\n      if (Array.isArray(stops) && stops.length > 0) {\r\n        if (stops.length === 1) {\r\n          arr = [stops[0], stops[0]];\r\n        } else {\r\n          arr = stops;\r\n        }\r\n      } else {\r\n        arr = ['#ffffff', '#ffffff'];\r\n      }\r\n      const w = arr.length;\r\n      const data = new Uint8Array(w * 4);\r\n      for (let i = 0; i < w; i++) {\r\n        const c = new THREE.Color(arr[i]);\r\n        data[i * 4 + 0] = Math.round(c.r * 255);\r\n        data[i * 4 + 1] = Math.round(c.g * 255);\r\n        data[i * 4 + 2] = Math.round(c.b * 255);\r\n        data[i * 4 + 3] = 255;\r\n      }\r\n      const tex = new THREE.DataTexture(data, w, 1, THREE.RGBAFormat);\r\n      tex.magFilter = THREE.LinearFilter;\r\n      tex.minFilter = THREE.LinearFilter;\r\n      tex.wrapS = THREE.ClampToEdgeWrapping;\r\n      tex.wrapT = THREE.ClampToEdgeWrapping;\r\n      tex.generateMipmaps = false;\r\n      tex.needsUpdate = true;\r\n      return tex;\r\n    }\r\n\r\n    const paletteTex = makePaletteTexture(colors);\r\n    const bgVec4 = new THREE.Vector4(0, 0, 0, 0); // always transparent\r\n\r\n    class CommonClass {\r\n      constructor() {\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.aspect = 1;\r\n        this.pixelRatio = 1;\r\n        this.isMobile = false;\r\n        this.breakpoint = 768;\r\n        this.fboWidth = null;\r\n        this.fboHeight = null;\r\n        this.time = 0;\r\n        this.delta = 0;\r\n        this.container = null;\r\n        this.renderer = null;\r\n        this.clock = null;\r\n      }\r\n      init(container) {\r\n        this.container = container;\r\n        this.pixelRatio = Math.min(window.devicePixelRatio || 1, 2);\r\n        this.resize();\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        this.renderer.autoClear = false;\r\n        this.renderer.setClearColor(new THREE.Color(0x000000), 0);\r\n        this.renderer.setPixelRatio(this.pixelRatio);\r\n        this.renderer.setSize(this.width, this.height);\r\n        this.renderer.domElement.style.width = '100%';\r\n        this.renderer.domElement.style.height = '100%';\r\n        this.renderer.domElement.style.display = 'block';\r\n        this.clock = new THREE.Clock();\r\n        this.clock.start();\r\n      }\r\n      resize() {\r\n        if (!this.container) return;\r\n        const rect = this.container.getBoundingClientRect();\r\n        this.width = Math.max(1, Math.floor(rect.width));\r\n        this.height = Math.max(1, Math.floor(rect.height));\r\n        this.aspect = this.width / this.height;\r\n        if (this.renderer) this.renderer.setSize(this.width, this.height, false);\r\n      }\r\n      update() {\r\n        this.delta = this.clock.getDelta();\r\n        this.time += this.delta;\r\n      }\r\n    }\r\n    const Common = new CommonClass();\r\n\r\n    class MouseClass {\r\n      constructor() {\r\n        this.mouseMoved = false;\r\n        this.coords = new THREE.Vector2();\r\n        this.coords_old = new THREE.Vector2();\r\n        this.diff = new THREE.Vector2();\r\n        this.timer = null;\r\n        this.container = null;\r\n        this._onMouseMove = this.onDocumentMouseMove.bind(this);\r\n        this._onTouchStart = this.onDocumentTouchStart.bind(this);\r\n        this._onTouchMove = this.onDocumentTouchMove.bind(this);\r\n        this._onMouseEnter = this.onMouseEnter.bind(this);\r\n        this._onMouseLeave = this.onMouseLeave.bind(this);\r\n        this._onTouchEnd = this.onTouchEnd.bind(this);\r\n        this.isHoverInside = false;\r\n        this.hasUserControl = false;\r\n        this.isAutoActive = false;\r\n        this.autoIntensity = 2.0;\r\n        this.takeoverActive = false;\r\n        this.takeoverStartTime = 0;\r\n        this.takeoverDuration = 0.25;\r\n        this.takeoverFrom = new THREE.Vector2();\r\n        this.takeoverTo = new THREE.Vector2();\r\n        this.onInteract = null;\r\n      }\r\n      init(container) {\r\n        this.container = container;\r\n        container.addEventListener('mousemove', this._onMouseMove, false);\r\n        container.addEventListener('touchstart', this._onTouchStart, false);\r\n        container.addEventListener('touchmove', this._onTouchMove, false);\r\n        container.addEventListener('mouseenter', this._onMouseEnter, false);\r\n        container.addEventListener('mouseleave', this._onMouseLeave, false);\r\n        container.addEventListener('touchend', this._onTouchEnd, false);\r\n      }\r\n      dispose() {\r\n        if (!this.container) return;\r\n        this.container.removeEventListener('mousemove', this._onMouseMove, false);\r\n        this.container.removeEventListener('touchstart', this._onTouchStart, false);\r\n        this.container.removeEventListener('touchmove', this._onTouchMove, false);\r\n        this.container.removeEventListener('mouseenter', this._onMouseEnter, false);\r\n        this.container.removeEventListener('mouseleave', this._onMouseLeave, false);\r\n        this.container.removeEventListener('touchend', this._onTouchEnd, false);\r\n      }\r\n      setCoords(x, y) {\r\n        if (!this.container) return;\r\n        if (this.timer) clearTimeout(this.timer);\r\n        const rect = this.container.getBoundingClientRect();\r\n        const nx = (x - rect.left) / rect.width;\r\n        const ny = (y - rect.top) / rect.height;\r\n        this.coords.set(nx * 2 - 1, -(ny * 2 - 1));\r\n        this.mouseMoved = true;\r\n        this.timer = setTimeout(() => {\r\n          this.mouseMoved = false;\r\n        }, 100);\r\n      }\r\n      setNormalized(nx, ny) {\r\n        this.coords.set(nx, ny);\r\n        this.mouseMoved = true;\r\n      }\r\n      onDocumentMouseMove(event) {\r\n        if (this.onInteract) this.onInteract();\r\n        if (this.isAutoActive && !this.hasUserControl && !this.takeoverActive) {\r\n          const rect = this.container.getBoundingClientRect();\r\n          const nx = (event.clientX - rect.left) / rect.width;\r\n          const ny = (event.clientY - rect.top) / rect.height;\r\n          this.takeoverFrom.copy(this.coords);\r\n          this.takeoverTo.set(nx * 2 - 1, -(ny * 2 - 1));\r\n          this.takeoverStartTime = performance.now();\r\n          this.takeoverActive = true;\r\n          this.hasUserControl = true;\r\n          this.isAutoActive = false;\r\n          return;\r\n        }\r\n        this.setCoords(event.clientX, event.clientY);\r\n        this.hasUserControl = true;\r\n      }\r\n      onDocumentTouchStart(event) {\r\n        if (event.touches.length === 1) {\r\n          const t = event.touches[0];\r\n          if (this.onInteract) this.onInteract();\r\n          this.setCoords(t.pageX, t.pageY);\r\n          this.hasUserControl = true;\r\n        }\r\n      }\r\n      onDocumentTouchMove(event) {\r\n        if (event.touches.length === 1) {\r\n          const t = event.touches[0];\r\n          if (this.onInteract) this.onInteract();\r\n          this.setCoords(t.pageX, t.pageY);\r\n        }\r\n      }\r\n      onTouchEnd() {\r\n        this.isHoverInside = false;\r\n      }\r\n      onMouseEnter() {\r\n        this.isHoverInside = true;\r\n      }\r\n      onMouseLeave() {\r\n        this.isHoverInside = false;\r\n      }\r\n      update() {\r\n        if (this.takeoverActive) {\r\n          const t = (performance.now() - this.takeoverStartTime) / (this.takeoverDuration * 1000);\r\n          if (t >= 1) {\r\n            this.takeoverActive = false;\r\n            this.coords.copy(this.takeoverTo);\r\n            this.coords_old.copy(this.coords);\r\n            this.diff.set(0, 0);\r\n          } else {\r\n            const k = t * t * (3 - 2 * t);\r\n            this.coords.copy(this.takeoverFrom).lerp(this.takeoverTo, k);\r\n          }\r\n        }\r\n        this.diff.subVectors(this.coords, this.coords_old);\r\n        this.coords_old.copy(this.coords);\r\n        if (this.coords_old.x === 0 && this.coords_old.y === 0) this.diff.set(0, 0);\r\n        if (this.isAutoActive && !this.takeoverActive) this.diff.multiplyScalar(this.autoIntensity);\r\n      }\r\n    }\r\n    const Mouse = new MouseClass();\r\n\r\n    class AutoDriver {\r\n      constructor(mouse, manager, opts) {\r\n        this.mouse = mouse;\r\n        this.manager = manager;\r\n        this.enabled = opts.enabled;\r\n        this.speed = opts.speed; // normalized units/sec\r\n        this.resumeDelay = opts.resumeDelay || 3000; // ms\r\n        this.rampDurationMs = (opts.rampDuration || 0) * 1000;\r\n        this.active = false;\r\n        this.current = new THREE.Vector2(0, 0);\r\n        this.target = new THREE.Vector2();\r\n        this.lastTime = performance.now();\r\n        this.activationTime = 0;\r\n        this.margin = 0.2;\r\n        this._tmpDir = new THREE.Vector2(); // reuse temp vector to avoid per-frame alloc\r\n        this.pickNewTarget();\r\n      }\r\n      pickNewTarget() {\r\n        const r = Math.random;\r\n        this.target.set((r() * 2 - 1) * (1 - this.margin), (r() * 2 - 1) * (1 - this.margin));\r\n      }\r\n      forceStop() {\r\n        this.active = false;\r\n        this.mouse.isAutoActive = false;\r\n      }\r\n      update() {\r\n        if (!this.enabled) return;\r\n        const now = performance.now();\r\n        const idle = now - this.manager.lastUserInteraction;\r\n        if (idle < this.resumeDelay) {\r\n          if (this.active) this.forceStop();\r\n          return;\r\n        }\r\n        if (this.mouse.isHoverInside) {\r\n          if (this.active) this.forceStop();\r\n          return;\r\n        }\r\n        if (!this.active) {\r\n          this.active = true;\r\n          this.current.copy(this.mouse.coords);\r\n          this.lastTime = now;\r\n          this.activationTime = now;\r\n        }\r\n        if (!this.active) return;\r\n        this.mouse.isAutoActive = true;\r\n        let dtSec = (now - this.lastTime) / 1000;\r\n        this.lastTime = now;\r\n        if (dtSec > 0.2) dtSec = 0.016;\r\n        const dir = this._tmpDir.subVectors(this.target, this.current);\r\n        const dist = dir.length();\r\n        if (dist < 0.01) {\r\n          this.pickNewTarget();\r\n          return;\r\n        }\r\n        dir.normalize();\r\n        let ramp = 1;\r\n        if (this.rampDurationMs > 0) {\r\n          const t = Math.min(1, (now - this.activationTime) / this.rampDurationMs);\r\n          ramp = t * t * (3 - 2 * t);\r\n        }\r\n        const step = this.speed * dtSec * ramp;\r\n        const move = Math.min(step, dist);\r\n        this.current.addScaledVector(dir, move);\r\n        this.mouse.setNormalized(this.current.x, this.current.y);\r\n      }\r\n    }\r\n\r\n    const face_vert = `\r\n  attribute vec3 position;\r\n  uniform vec2 px;\r\n  uniform vec2 boundarySpace;\r\n  varying vec2 uv;\r\n  precision highp float;\r\n  void main(){\r\n  vec3 pos = position;\r\n  vec2 scale = 1.0 - boundarySpace * 2.0;\r\n  pos.xy = pos.xy * scale;\r\n  uv = vec2(0.5)+(pos.xy)*0.5;\r\n  gl_Position = vec4(pos, 1.0);\r\n}\r\n`;\r\n    const line_vert = `\r\n  attribute vec3 position;\r\n  uniform vec2 px;\r\n  precision highp float;\r\n  varying vec2 uv;\r\n  void main(){\r\n  vec3 pos = position;\r\n  uv = 0.5 + pos.xy * 0.5;\r\n  vec2 n = sign(pos.xy);\r\n  pos.xy = abs(pos.xy) - px * 1.0;\r\n  pos.xy *= n;\r\n  gl_Position = vec4(pos, 1.0);\r\n}\r\n`;\r\n    const mouse_vert = `\r\n    precision highp float;\r\n    attribute vec3 position;\r\n    attribute vec2 uv;\r\n    uniform vec2 center;\r\n    uniform vec2 scale;\r\n    uniform vec2 px;\r\n    varying vec2 vUv;\r\n    void main(){\r\n    vec2 pos = position.xy * scale * 2.0 * px + center;\r\n    vUv = uv;\r\n    gl_Position = vec4(pos, 0.0, 1.0);\r\n}\r\n`;\r\n    const advection_frag = `\r\n    precision highp float;\r\n    uniform sampler2D velocity;\r\n    uniform float dt;\r\n    uniform bool isBFECC;\r\n    uniform vec2 fboSize;\r\n    uniform vec2 px;\r\n    varying vec2 uv;\r\n    void main(){\r\n    vec2 ratio = max(fboSize.x, fboSize.y) / fboSize;\r\n    if(isBFECC == false){\r\n        vec2 vel = texture2D(velocity, uv).xy;\r\n        vec2 uv2 = uv - vel * dt * ratio;\r\n        vec2 newVel = texture2D(velocity, uv2).xy;\r\n        gl_FragColor = vec4(newVel, 0.0, 0.0);\r\n    } else {\r\n        vec2 spot_new = uv;\r\n        vec2 vel_old = texture2D(velocity, uv).xy;\r\n        vec2 spot_old = spot_new - vel_old * dt * ratio;\r\n        vec2 vel_new1 = texture2D(velocity, spot_old).xy;\r\n        vec2 spot_new2 = spot_old + vel_new1 * dt * ratio;\r\n        vec2 error = spot_new2 - spot_new;\r\n        vec2 spot_new3 = spot_new - error / 2.0;\r\n        vec2 vel_2 = texture2D(velocity, spot_new3).xy;\r\n        vec2 spot_old2 = spot_new3 - vel_2 * dt * ratio;\r\n        vec2 newVel2 = texture2D(velocity, spot_old2).xy; \r\n        gl_FragColor = vec4(newVel2, 0.0, 0.0);\r\n    }\r\n}\r\n`;\r\n    const color_frag = `\r\n    precision highp float;\r\n    uniform sampler2D velocity;\r\n    uniform sampler2D palette;\r\n    uniform vec4 bgColor;\r\n    varying vec2 uv;\r\n    void main(){\r\n    vec2 vel = texture2D(velocity, uv).xy;\r\n    float lenv = clamp(length(vel), 0.0, 1.0);\r\n    vec3 c = texture2D(palette, vec2(lenv, 0.5)).rgb;\r\n    vec3 outRGB = mix(bgColor.rgb, c, lenv);\r\n    float outA = mix(bgColor.a, 1.0, lenv);\r\n    gl_FragColor = vec4(outRGB, outA);\r\n}\r\n`;\r\n    const divergence_frag = `\r\n    precision highp float;\r\n    uniform sampler2D velocity;\r\n    uniform float dt;\r\n    uniform vec2 px;\r\n    varying vec2 uv;\r\n    void main(){\r\n    float x0 = texture2D(velocity, uv-vec2(px.x, 0.0)).x;\r\n    float x1 = texture2D(velocity, uv+vec2(px.x, 0.0)).x;\r\n    float y0 = texture2D(velocity, uv-vec2(0.0, px.y)).y;\r\n    float y1 = texture2D(velocity, uv+vec2(0.0, px.y)).y;\r\n    float divergence = (x1 - x0 + y1 - y0) / 2.0;\r\n    gl_FragColor = vec4(divergence / dt);\r\n}\r\n`;\r\n    const externalForce_frag = `\r\n    precision highp float;\r\n    uniform vec2 force;\r\n    uniform vec2 center;\r\n    uniform vec2 scale;\r\n    uniform vec2 px;\r\n    varying vec2 vUv;\r\n    void main(){\r\n    vec2 circle = (vUv - 0.5) * 2.0;\r\n    float d = 1.0 - min(length(circle), 1.0);\r\n    d *= d;\r\n    gl_FragColor = vec4(force * d, 0.0, 1.0);\r\n}\r\n`;\r\n    const poisson_frag = `\r\n    precision highp float;\r\n    uniform sampler2D pressure;\r\n    uniform sampler2D divergence;\r\n    uniform vec2 px;\r\n    varying vec2 uv;\r\n    void main(){\r\n    float p0 = texture2D(pressure, uv + vec2(px.x * 2.0, 0.0)).r;\r\n    float p1 = texture2D(pressure, uv - vec2(px.x * 2.0, 0.0)).r;\r\n    float p2 = texture2D(pressure, uv + vec2(0.0, px.y * 2.0)).r;\r\n    float p3 = texture2D(pressure, uv - vec2(0.0, px.y * 2.0)).r;\r\n    float div = texture2D(divergence, uv).r;\r\n    float newP = (p0 + p1 + p2 + p3) / 4.0 - div;\r\n    gl_FragColor = vec4(newP);\r\n}\r\n`;\r\n    const pressure_frag = `\r\n    precision highp float;\r\n    uniform sampler2D pressure;\r\n    uniform sampler2D velocity;\r\n    uniform vec2 px;\r\n    uniform float dt;\r\n    varying vec2 uv;\r\n    void main(){\r\n    float step = 1.0;\r\n    float p0 = texture2D(pressure, uv + vec2(px.x * step, 0.0)).r;\r\n    float p1 = texture2D(pressure, uv - vec2(px.x * step, 0.0)).r;\r\n    float p2 = texture2D(pressure, uv + vec2(0.0, px.y * step)).r;\r\n    float p3 = texture2D(pressure, uv - vec2(0.0, px.y * step)).r;\r\n    vec2 v = texture2D(velocity, uv).xy;\r\n    vec2 gradP = vec2(p0 - p1, p2 - p3) * 0.5;\r\n    v = v - gradP * dt;\r\n    gl_FragColor = vec4(v, 0.0, 1.0);\r\n}\r\n`;\r\n    const viscous_frag = `\r\n    precision highp float;\r\n    uniform sampler2D velocity;\r\n    uniform sampler2D velocity_new;\r\n    uniform float v;\r\n    uniform vec2 px;\r\n    uniform float dt;\r\n    varying vec2 uv;\r\n    void main(){\r\n    vec2 old = texture2D(velocity, uv).xy;\r\n    vec2 new0 = texture2D(velocity_new, uv + vec2(px.x * 2.0, 0.0)).xy;\r\n    vec2 new1 = texture2D(velocity_new, uv - vec2(px.x * 2.0, 0.0)).xy;\r\n    vec2 new2 = texture2D(velocity_new, uv + vec2(0.0, px.y * 2.0)).xy;\r\n    vec2 new3 = texture2D(velocity_new, uv - vec2(0.0, px.y * 2.0)).xy;\r\n    vec2 newv = 4.0 * old + v * dt * (new0 + new1 + new2 + new3);\r\n    newv /= 4.0 * (1.0 + v * dt);\r\n    gl_FragColor = vec4(newv, 0.0, 0.0);\r\n}\r\n`;\r\n\r\n    class ShaderPass {\r\n      constructor(props) {\r\n        this.props = props || {};\r\n        this.uniforms = this.props.material?.uniforms;\r\n        this.scene = null;\r\n        this.camera = null;\r\n        this.material = null;\r\n        this.geometry = null;\r\n        this.plane = null;\r\n      }\r\n      init() {\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.Camera();\r\n        if (this.uniforms) {\r\n          this.material = new THREE.RawShaderMaterial(this.props.material);\r\n          this.geometry = new THREE.PlaneGeometry(2.0, 2.0);\r\n          this.plane = new THREE.Mesh(this.geometry, this.material);\r\n          this.scene.add(this.plane);\r\n        }\r\n      }\r\n      update() {\r\n        Common.renderer.setRenderTarget(this.props.output || null);\r\n        Common.renderer.render(this.scene, this.camera);\r\n        Common.renderer.setRenderTarget(null);\r\n      }\r\n    }\r\n\r\n    class Advection extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({\r\n          material: {\r\n            vertexShader: face_vert,\r\n            fragmentShader: advection_frag,\r\n            uniforms: {\r\n              boundarySpace: { value: simProps.cellScale },\r\n              px: { value: simProps.cellScale },\r\n              fboSize: { value: simProps.fboSize },\r\n              velocity: { value: simProps.src.texture },\r\n              dt: { value: simProps.dt },\r\n              isBFECC: { value: true }\r\n            }\r\n          },\r\n          output: simProps.dst\r\n        });\r\n        this.uniforms = this.props.material.uniforms;\r\n        this.init();\r\n      }\r\n      init() {\r\n        super.init();\r\n        this.createBoundary();\r\n      }\r\n      createBoundary() {\r\n        const boundaryG = new THREE.BufferGeometry();\r\n        const vertices_boundary = new Float32Array([\r\n          -1, -1, 0, -1, 1, 0, -1, 1, 0, 1, 1, 0, 1, 1, 0, 1, -1, 0, 1, -1, 0, -1, -1, 0\r\n        ]);\r\n        boundaryG.setAttribute('position', new THREE.BufferAttribute(vertices_boundary, 3));\r\n        const boundaryM = new THREE.RawShaderMaterial({\r\n          vertexShader: line_vert,\r\n          fragmentShader: advection_frag,\r\n          uniforms: this.uniforms\r\n        });\r\n        this.line = new THREE.LineSegments(boundaryG, boundaryM);\r\n        this.scene.add(this.line);\r\n      }\r\n      update({ dt, isBounce, BFECC }) {\r\n        this.uniforms.dt.value = dt;\r\n        this.line.visible = isBounce;\r\n        this.uniforms.isBFECC.value = BFECC;\r\n        super.update();\r\n      }\r\n    }\r\n\r\n    class ExternalForce extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({ output: simProps.dst });\r\n        this.init(simProps);\r\n      }\r\n      init(simProps) {\r\n        super.init();\r\n        const mouseG = new THREE.PlaneGeometry(1, 1);\r\n        const mouseM = new THREE.RawShaderMaterial({\r\n          vertexShader: mouse_vert,\r\n          fragmentShader: externalForce_frag,\r\n          blending: THREE.AdditiveBlending,\r\n          depthWrite: false,\r\n          uniforms: {\r\n            px: { value: simProps.cellScale },\r\n            force: { value: new THREE.Vector2(0.0, 0.0) },\r\n            center: { value: new THREE.Vector2(0.0, 0.0) },\r\n            scale: { value: new THREE.Vector2(simProps.cursor_size, simProps.cursor_size) }\r\n          }\r\n        });\r\n        this.mouse = new THREE.Mesh(mouseG, mouseM);\r\n        this.scene.add(this.mouse);\r\n      }\r\n      update(props) {\r\n        const forceX = (Mouse.diff.x / 2) * props.mouse_force;\r\n        const forceY = (Mouse.diff.y / 2) * props.mouse_force;\r\n        const cursorSizeX = props.cursor_size * props.cellScale.x;\r\n        const cursorSizeY = props.cursor_size * props.cellScale.y;\r\n        const centerX = Math.min(\r\n          Math.max(Mouse.coords.x, -1 + cursorSizeX + props.cellScale.x * 2),\r\n          1 - cursorSizeX - props.cellScale.x * 2\r\n        );\r\n        const centerY = Math.min(\r\n          Math.max(Mouse.coords.y, -1 + cursorSizeY + props.cellScale.y * 2),\r\n          1 - cursorSizeY - props.cellScale.y * 2\r\n        );\r\n        const uniforms = this.mouse.material.uniforms;\r\n        uniforms.force.value.set(forceX, forceY);\r\n        uniforms.center.value.set(centerX, centerY);\r\n        uniforms.scale.value.set(props.cursor_size, props.cursor_size);\r\n        super.update();\r\n      }\r\n    }\r\n\r\n    class Viscous extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({\r\n          material: {\r\n            vertexShader: face_vert,\r\n            fragmentShader: viscous_frag,\r\n            uniforms: {\r\n              boundarySpace: { value: simProps.boundarySpace },\r\n              velocity: { value: simProps.src.texture },\r\n              velocity_new: { value: simProps.dst_.texture },\r\n              v: { value: simProps.viscous },\r\n              px: { value: simProps.cellScale },\r\n              dt: { value: simProps.dt }\r\n            }\r\n          },\r\n          output: simProps.dst,\r\n          output0: simProps.dst_,\r\n          output1: simProps.dst\r\n        });\r\n        this.init();\r\n      }\r\n      update({ viscous, iterations, dt }) {\r\n        let fbo_in, fbo_out;\r\n        this.uniforms.v.value = viscous;\r\n        for (let i = 0; i < iterations; i++) {\r\n          if (i % 2 === 0) {\r\n            fbo_in = this.props.output0;\r\n            fbo_out = this.props.output1;\r\n          } else {\r\n            fbo_in = this.props.output1;\r\n            fbo_out = this.props.output0;\r\n          }\r\n          this.uniforms.velocity_new.value = fbo_in.texture;\r\n          this.props.output = fbo_out;\r\n          this.uniforms.dt.value = dt;\r\n          super.update();\r\n        }\r\n        return fbo_out;\r\n      }\r\n    }\r\n\r\n    class Divergence extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({\r\n          material: {\r\n            vertexShader: face_vert,\r\n            fragmentShader: divergence_frag,\r\n            uniforms: {\r\n              boundarySpace: { value: simProps.boundarySpace },\r\n              velocity: { value: simProps.src.texture },\r\n              px: { value: simProps.cellScale },\r\n              dt: { value: simProps.dt }\r\n            }\r\n          },\r\n          output: simProps.dst\r\n        });\r\n        this.init();\r\n      }\r\n      update({ vel }) {\r\n        this.uniforms.velocity.value = vel.texture;\r\n        super.update();\r\n      }\r\n    }\r\n\r\n    class Poisson extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({\r\n          material: {\r\n            vertexShader: face_vert,\r\n            fragmentShader: poisson_frag,\r\n            uniforms: {\r\n              boundarySpace: { value: simProps.boundarySpace },\r\n              pressure: { value: simProps.dst_.texture },\r\n              divergence: { value: simProps.src.texture },\r\n              px: { value: simProps.cellScale }\r\n            }\r\n          },\r\n          output: simProps.dst,\r\n          output0: simProps.dst_,\r\n          output1: simProps.dst\r\n        });\r\n        this.init();\r\n      }\r\n      update({ iterations }) {\r\n        let p_in, p_out;\r\n        for (let i = 0; i < iterations; i++) {\r\n          if (i % 2 === 0) {\r\n            p_in = this.props.output0;\r\n            p_out = this.props.output1;\r\n          } else {\r\n            p_in = this.props.output1;\r\n            p_out = this.props.output0;\r\n          }\r\n          this.uniforms.pressure.value = p_in.texture;\r\n          this.props.output = p_out;\r\n          super.update();\r\n        }\r\n        return p_out;\r\n      }\r\n    }\r\n\r\n    class Pressure extends ShaderPass {\r\n      constructor(simProps) {\r\n        super({\r\n          material: {\r\n            vertexShader: face_vert,\r\n            fragmentShader: pressure_frag,\r\n            uniforms: {\r\n              boundarySpace: { value: simProps.boundarySpace },\r\n              pressure: { value: simProps.src_p.texture },\r\n              velocity: { value: simProps.src_v.texture },\r\n              px: { value: simProps.cellScale },\r\n              dt: { value: simProps.dt }\r\n            }\r\n          },\r\n          output: simProps.dst\r\n        });\r\n        this.init();\r\n      }\r\n      update({ vel, pressure }) {\r\n        this.uniforms.velocity.value = vel.texture;\r\n        this.uniforms.pressure.value = pressure.texture;\r\n        super.update();\r\n      }\r\n    }\r\n\r\n    class Simulation {\r\n      constructor(options) {\r\n        this.options = {\r\n          iterations_poisson: 32,\r\n          iterations_viscous: 32,\r\n          mouse_force: 20,\r\n          resolution: 0.5,\r\n          cursor_size: 100,\r\n          viscous: 30,\r\n          isBounce: false,\r\n          dt: 0.014,\r\n          isViscous: false,\r\n          BFECC: true,\r\n          ...options\r\n        };\r\n        this.fbos = {\r\n          vel_0: null,\r\n          vel_1: null,\r\n          vel_viscous0: null,\r\n          vel_viscous1: null,\r\n          div: null,\r\n          pressure_0: null,\r\n          pressure_1: null\r\n        };\r\n        this.fboSize = new THREE.Vector2();\r\n        this.cellScale = new THREE.Vector2();\r\n        this.boundarySpace = new THREE.Vector2();\r\n        this.init();\r\n      }\r\n      init() {\r\n        this.calcSize();\r\n        this.createAllFBO();\r\n        this.createShaderPass();\r\n      }\r\n      getFloatType() {\r\n        const isIOS = /(iPad|iPhone|iPod)/i.test(navigator.userAgent);\r\n        return isIOS ? THREE.HalfFloatType : THREE.FloatType;\r\n      }\r\n      createAllFBO() {\r\n        const type = this.getFloatType();\r\n        const opts = {\r\n          type,\r\n          depthBuffer: false,\r\n          stencilBuffer: false,\r\n          minFilter: THREE.LinearFilter,\r\n          magFilter: THREE.LinearFilter,\r\n          wrapS: THREE.ClampToEdgeWrapping,\r\n          wrapT: THREE.ClampToEdgeWrapping\r\n        };\r\n        for (let key in this.fbos) {\r\n          this.fbos[key] = new THREE.WebGLRenderTarget(this.fboSize.x, this.fboSize.y, opts);\r\n        }\r\n      }\r\n      createShaderPass() {\r\n        this.advection = new Advection({\r\n          cellScale: this.cellScale,\r\n          fboSize: this.fboSize,\r\n          dt: this.options.dt,\r\n          src: this.fbos.vel_0,\r\n          dst: this.fbos.vel_1\r\n        });\r\n        this.externalForce = new ExternalForce({\r\n          cellScale: this.cellScale,\r\n          cursor_size: this.options.cursor_size,\r\n          dst: this.fbos.vel_1\r\n        });\r\n        this.viscous = new Viscous({\r\n          cellScale: this.cellScale,\r\n          boundarySpace: this.boundarySpace,\r\n          viscous: this.options.viscous,\r\n          src: this.fbos.vel_1,\r\n          dst: this.fbos.vel_viscous1,\r\n          dst_: this.fbos.vel_viscous0,\r\n          dt: this.options.dt\r\n        });\r\n        this.divergence = new Divergence({\r\n          cellScale: this.cellScale,\r\n          boundarySpace: this.boundarySpace,\r\n          src: this.fbos.vel_viscous0,\r\n          dst: this.fbos.div,\r\n          dt: this.options.dt\r\n        });\r\n        this.poisson = new Poisson({\r\n          cellScale: this.cellScale,\r\n          boundarySpace: this.boundarySpace,\r\n          src: this.fbos.div,\r\n          dst: this.fbos.pressure_1,\r\n          dst_: this.fbos.pressure_0\r\n        });\r\n        this.pressure = new Pressure({\r\n          cellScale: this.cellScale,\r\n          boundarySpace: this.boundarySpace,\r\n          src_p: this.fbos.pressure_0,\r\n          src_v: this.fbos.vel_viscous0,\r\n          dst: this.fbos.vel_0,\r\n          dt: this.options.dt\r\n        });\r\n      }\r\n      calcSize() {\r\n        const width = Math.max(1, Math.round(this.options.resolution * Common.width));\r\n        const height = Math.max(1, Math.round(this.options.resolution * Common.height));\r\n        const px_x = 1.0 / width;\r\n        const px_y = 1.0 / height;\r\n        this.cellScale.set(px_x, px_y);\r\n        this.fboSize.set(width, height);\r\n      }\r\n      resize() {\r\n        this.calcSize();\r\n        for (let key in this.fbos) {\r\n          this.fbos[key].setSize(this.fboSize.x, this.fboSize.y);\r\n        }\r\n      }\r\n      update() {\r\n        if (this.options.isBounce) {\r\n          this.boundarySpace.set(0, 0);\r\n        } else {\r\n          this.boundarySpace.copy(this.cellScale);\r\n        }\r\n        this.advection.update({\r\n          dt: this.options.dt,\r\n          isBounce: this.options.isBounce,\r\n          BFECC: this.options.BFECC\r\n        });\r\n        this.externalForce.update({\r\n          cursor_size: this.options.cursor_size,\r\n          mouse_force: this.options.mouse_force,\r\n          cellScale: this.cellScale\r\n        });\r\n        let vel = this.fbos.vel_1;\r\n        if (this.options.isViscous) {\r\n          vel = this.viscous.update({\r\n            viscous: this.options.viscous,\r\n            iterations: this.options.iterations_viscous,\r\n            dt: this.options.dt\r\n          });\r\n        }\r\n        this.divergence.update({ vel });\r\n        const pressure = this.poisson.update({\r\n          iterations: this.options.iterations_poisson\r\n        });\r\n        this.pressure.update({ vel, pressure });\r\n      }\r\n    }\r\n\r\n    class Output {\r\n      constructor() {\r\n        this.init();\r\n      }\r\n      init() {\r\n        this.simulation = new Simulation();\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.Camera();\r\n        this.output = new THREE.Mesh(\r\n          new THREE.PlaneGeometry(2, 2),\r\n          new THREE.RawShaderMaterial({\r\n            vertexShader: face_vert,\r\n            fragmentShader: color_frag,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            uniforms: {\r\n              velocity: { value: this.simulation.fbos.vel_0.texture },\r\n              boundarySpace: { value: new THREE.Vector2() },\r\n              palette: { value: paletteTex },\r\n              bgColor: { value: bgVec4 }\r\n            }\r\n          })\r\n        );\r\n        this.scene.add(this.output);\r\n      }\r\n      addScene(mesh) {\r\n        this.scene.add(mesh);\r\n      }\r\n      resize() {\r\n        this.simulation.resize();\r\n      }\r\n      render() {\r\n        Common.renderer.setRenderTarget(null);\r\n        Common.renderer.render(this.scene, this.camera);\r\n      }\r\n      update() {\r\n        this.simulation.update();\r\n        this.render();\r\n      }\r\n    }\r\n\r\n    class WebGLManager {\r\n      constructor(props) {\r\n        this.props = props;\r\n        Common.init(props.$wrapper);\r\n        Mouse.init(props.$wrapper);\r\n        Mouse.autoIntensity = props.autoIntensity;\r\n        Mouse.takeoverDuration = props.takeoverDuration;\r\n        this.lastUserInteraction = performance.now();\r\n        Mouse.onInteract = () => {\r\n          this.lastUserInteraction = performance.now();\r\n          if (this.autoDriver) this.autoDriver.forceStop();\r\n        };\r\n        this.autoDriver = new AutoDriver(Mouse, this, {\r\n          enabled: props.autoDemo,\r\n          speed: props.autoSpeed,\r\n          resumeDelay: props.autoResumeDelay,\r\n          rampDuration: props.autoRampDuration\r\n        });\r\n        this.init();\r\n        this._loop = this.loop.bind(this);\r\n        this._resize = this.resize.bind(this);\r\n        window.addEventListener('resize', this._resize);\r\n        this._onVisibility = () => {\r\n          const hidden = document.hidden;\r\n          if (hidden) {\r\n            this.pause();\r\n          } else if (isVisibleRef.current) {\r\n            this.start();\r\n          }\r\n        };\r\n        document.addEventListener('visibilitychange', this._onVisibility);\r\n        this.running = false;\r\n      }\r\n      init() {\r\n        this.props.$wrapper.prepend(Common.renderer.domElement);\r\n        this.output = new Output();\r\n      }\r\n      resize() {\r\n        Common.resize();\r\n        this.output.resize();\r\n      }\r\n      render() {\r\n        if (this.autoDriver) this.autoDriver.update();\r\n        Mouse.update();\r\n        Common.update();\r\n        this.output.update();\r\n      }\r\n      loop() {\r\n        if (!this.running) return; // safety\r\n        this.render();\r\n        rafRef.current = requestAnimationFrame(this._loop);\r\n      }\r\n      start() {\r\n        if (this.running) return;\r\n        this.running = true;\r\n        this._loop();\r\n      }\r\n      pause() {\r\n        this.running = false;\r\n        if (rafRef.current) {\r\n          cancelAnimationFrame(rafRef.current);\r\n          rafRef.current = null;\r\n        }\r\n      }\r\n      dispose() {\r\n        try {\r\n          window.removeEventListener('resize', this._resize);\r\n          document.removeEventListener('visibilitychange', this._onVisibility);\r\n          Mouse.dispose();\r\n          if (Common.renderer) {\r\n            const canvas = Common.renderer.domElement;\r\n            if (canvas && canvas.parentNode) canvas.parentNode.removeChild(canvas);\r\n            Common.renderer.dispose();\r\n          }\r\n        } catch (e) {\r\n          void 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    const container = mountRef.current;\r\n    container.style.position = container.style.position || 'relative';\r\n    container.style.overflow = container.style.overflow || 'hidden';\r\n\r\n    const webgl = new WebGLManager({\r\n      $wrapper: container,\r\n      autoDemo,\r\n      autoSpeed,\r\n      autoIntensity,\r\n      takeoverDuration,\r\n      autoResumeDelay,\r\n      autoRampDuration\r\n    });\r\n    webglRef.current = webgl;\r\n\r\n    const applyOptionsFromProps = () => {\r\n      if (!webglRef.current) return;\r\n      const sim = webglRef.current.output?.simulation;\r\n      if (!sim) return;\r\n      const prevRes = sim.options.resolution;\r\n      Object.assign(sim.options, {\r\n        mouse_force: mouseForce,\r\n        cursor_size: cursorSize,\r\n        isViscous,\r\n        viscous,\r\n        iterations_viscous: iterationsViscous,\r\n        iterations_poisson: iterationsPoisson,\r\n        dt,\r\n        BFECC,\r\n        resolution,\r\n        isBounce\r\n      });\r\n      if (resolution !== prevRes) {\r\n        sim.resize();\r\n      }\r\n    };\r\n    applyOptionsFromProps();\r\n\r\n    webgl.start();\r\n\r\n    // IntersectionObserver to pause rendering when not visible\r\n    const io = new IntersectionObserver(\r\n      entries => {\r\n        const entry = entries[0];\r\n        const isVisible = entry.isIntersecting && entry.intersectionRatio > 0;\r\n        isVisibleRef.current = isVisible;\r\n        if (!webglRef.current) return;\r\n        if (isVisible && !document.hidden) {\r\n          webglRef.current.start();\r\n        } else {\r\n          webglRef.current.pause();\r\n        }\r\n      },\r\n      { threshold: [0, 0.01, 0.1] }\r\n    );\r\n    io.observe(container);\r\n    intersectionObserverRef.current = io;\r\n\r\n    const ro = new ResizeObserver(() => {\r\n      if (!webglRef.current) return;\r\n      if (resizeRafRef.current) cancelAnimationFrame(resizeRafRef.current);\r\n      resizeRafRef.current = requestAnimationFrame(() => {\r\n        if (!webglRef.current) return;\r\n        webglRef.current.resize();\r\n      });\r\n    });\r\n    ro.observe(container);\r\n    resizeObserverRef.current = ro;\r\n\r\n    return () => {\r\n      if (rafRef.current) cancelAnimationFrame(rafRef.current);\r\n      if (resizeObserverRef.current) {\r\n        try {\r\n          resizeObserverRef.current.disconnect();\r\n        } catch (e) {\r\n          void 0;\r\n        }\r\n      }\r\n      if (intersectionObserverRef.current) {\r\n        try {\r\n          intersectionObserverRef.current.disconnect();\r\n        } catch (e) {\r\n          void 0;\r\n        }\r\n      }\r\n      if (webglRef.current) {\r\n        webglRef.current.dispose();\r\n      }\r\n      webglRef.current = null;\r\n    };\r\n  }, [\r\n    BFECC,\r\n    cursorSize,\r\n    dt,\r\n    isBounce,\r\n    isViscous,\r\n    iterationsPoisson,\r\n    iterationsViscous,\r\n    mouseForce,\r\n    resolution,\r\n    viscous,\r\n    colors,\r\n    autoDemo,\r\n    autoSpeed,\r\n    autoIntensity,\r\n    takeoverDuration,\r\n    autoResumeDelay,\r\n    autoRampDuration\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const webgl = webglRef.current;\r\n    if (!webgl) return;\r\n    const sim = webgl.output?.simulation;\r\n    if (!sim) return;\r\n    const prevRes = sim.options.resolution;\r\n    Object.assign(sim.options, {\r\n      mouse_force: mouseForce,\r\n      cursor_size: cursorSize,\r\n      isViscous,\r\n      viscous,\r\n      iterations_viscous: iterationsViscous,\r\n      iterations_poisson: iterationsPoisson,\r\n      dt,\r\n      BFECC,\r\n      resolution,\r\n      isBounce\r\n    });\r\n    if (webgl.autoDriver) {\r\n      webgl.autoDriver.enabled = autoDemo;\r\n      webgl.autoDriver.speed = autoSpeed;\r\n      webgl.autoDriver.resumeDelay = autoResumeDelay;\r\n      webgl.autoDriver.rampDurationMs = autoRampDuration * 1000;\r\n      if (webgl.autoDriver.mouse) {\r\n        webgl.autoDriver.mouse.autoIntensity = autoIntensity;\r\n        webgl.autoDriver.mouse.takeoverDuration = takeoverDuration;\r\n      }\r\n    }\r\n    if (resolution !== prevRes) {\r\n      sim.resize();\r\n    }\r\n  }, [\r\n    mouseForce,\r\n    cursorSize,\r\n    isViscous,\r\n    viscous,\r\n    iterationsViscous,\r\n    iterationsPoisson,\r\n    dt,\r\n    BFECC,\r\n    resolution,\r\n    isBounce,\r\n    autoDemo,\r\n    autoSpeed,\r\n    autoIntensity,\r\n    takeoverDuration,\r\n    autoResumeDelay,\r\n    autoRampDuration\r\n  ]);\r\n\r\n  return <div ref={mountRef} className={`liquid-ether-container ${className || ''}`} style={style} />;\r\n}\r\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,SAAS,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,UAAU,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,cAAc,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,UAAU,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,eAAe,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,kBAAkB,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,YAAY,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,aAAa,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG,MAAMC,YAAY,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IAEG,MAAMC,UAAU,CAAC;MACfpI,WAAWA,CAACqI,KAAK,EAAE;QAAA,IAAAC,oBAAA;QACjB,IAAI,CAACD,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;QACxB,IAAI,CAACE,QAAQ,IAAAD,oBAAA,GAAG,IAAI,CAACD,KAAK,CAACG,QAAQ,cA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}